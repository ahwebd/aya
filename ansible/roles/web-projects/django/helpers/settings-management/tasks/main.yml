---
- when: inventory_hostname == groups['webserver'][0]
  block:
  - name: Read_settings_file | {{ role_name | basename }}
    tags: Read_settings_file
    slurp:
      src: "{{ project_dir }}/{{ project }}/settings.py"
    register: original_settings

  - name: Create_settings_directory | {{ role_name | basename }}
    tags: Create_settings_directory
    file:
      path: "{{ project_dir }}/{{ project }}/settings"
      state: directory

  - name: Create_init_file | {{ role_name | basename }}
    tags: Create_init_file
    copy:
      content: ""
      dest: "{{ project_dir }}/{{ project }}/settings/__init__.py"
      force: false

  - name: Create_base_settings_file | {{ role_name | basename }}
    tags: Create_base_settings_file
    copy:
      src: "{{ project_dir }}/{{ project }}/settings.py"
      dest: "{{ project_dir }}/{{ project }}/settings/base.py"
      remote_src: yes
      force: false

  - name: Delete_initial_settings_file | {{ role_name | basename }}
    tags: Delete_initial_settings_file
    file:
      path: "{{ project_dir }}/{{ project }}/settings.py"
      state: absent

  - name: Remove_sensitive_and_env_related_info_from_base_settings_file | {{ role_name | basename }}
    tags: Remove_sensitive_and_env_related_info_from_base_settings_file
    lineinfile:
      path: "{{ project_dir }}/{{ project }}/settings/base.py"
      regexp: "^\\s*{{ item }}"
      state: absent
    with_items:
      - "SECRET_KEY = "
      - "'NAME': '{{ db }}'"
      - "'USER': '{{ db_user }}'"
      - "'PASSWORD': '{{ hostvars[ db_node ]['db_user_password']['stdout'] }}'"

  - name: Project_settings_paths_adjustment | {{ role_name | basename }}
    tags: Project_settings_paths_adjustment
    replace:
      path: "{{ project_dir }}/{{ project }}/settings/base.py"
      regexp: "{{ item | regex_escape() }}"
      replace: "os.path.dirname({{ item }})"
    loop:
      - 'os.path.abspath(__file__)'
      - 'os.path.dirname(__file__)'

  - name: Create_environment_specific_settings_file | {{ role_name | basename }}
    tags: Create_environment_specific_settings_file
    template:
      src: "templates/{{ deployment_env }}.py.j2"
      dest: "{{ project_dir }}/{{ project }}/settings/{{ deployment_env }}.py"

  - name: Set_django_settings_module | {{ role_name | basename }}
    tags: Set_django_settings_module
    replace:
      path: "{{ project_dir }}/{{ item }}"
      regexp: "^(\\s*)os\\.environ\\.setdefault(.+)DJANGO_SETTINGS_MODULE(.+){{ project }}\\.settings([\"']\\))$"
      replace: '\1os.environ.setdefault\2DJANGO_SETTINGS_MODULE\3{{ project }}.settings.{{ deployment_env }}\4'
    loop:
      - manage.py
      - "{{ project }}/wsgi.py"

- name: Create_docker_secret_for_project_secret_key | {{ role_name | basename }}
  tags: Create_docker_secret_for_project_secret_key
  when: inventory_hostname == groups['docker-swarm-manager'][0]
  docker_secret:
    name: "{{ deployment_env }}_{{ project }}_secret_key"
    data: "{{ hostvars[groups['webserver'][0]]['original_settings']['content'] | b64decode
          | regex_search(\"SECRET_KEY = '.+'\")
          | regex_replace(\"SECRET_KEY = \")
          | regex_replace(\"'\") }}"
  ignore_errors: true
