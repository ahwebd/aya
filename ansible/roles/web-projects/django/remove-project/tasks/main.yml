---
- ignore_errors: true
  block:
  - when: inventory_hostname == groups['webserver'][0]
    block:
    - name: Remove_uwsgi_vassal_file | {{ role_name | basename }}
      tags: Remove_uwsgi_vassal_file
      file:
        path: "{{ apps_dir }}/etc/uwsgi/vassals/{{ deployment_env }}_{{ project }}.ini"
        state: absent

    - name: Remove_nginx_config_file | {{ role_name | basename }}
      tags: Remove_nginx_config_file
      file:
        path: "{{ apps_dir }}/etc/nginx/conf.d/{{ deployment_env }}_{{ project }}.conf"
        state: absent

    - name: Remove_db_user_password_file | {{ role_name | basename }}
      tags: Remove_db_user_password_file
      file:
        path: "/apps/etc/secrets/{{ deployment_env }}_{{ project }}_db_user_password"
        state: absent

    - name: Remove_secret_key_file | {{ role_name | basename }}
      tags: Remove_secret_key_file
      file:
        path: "/apps/etc/secrets/{{ deployment_env }}_{{ project }}_secret_key"
        state: absent

    - name: Remove_project_directory | {{ role_name | basename }}
      tags: Remove_project_directory
      file:
        path: "{{ project_dir }}"
        state: absent

  - name: Remove_project_virtual_environment | {{ role_name | basename }}
    tags: Remove_project_virtual_environment
    when: inventory_hostname in groups['webserver']
    file:
      path: "{{ python_venvs_dir }}/{{ deployment_env }}_{{ project }}"
      state: absent

  - when: inventory_hostname == db_node
    block:
    - name: Revoke_new_connections_to_database | {{ role_name | basename }}
      tags: Revoke_new_connections_to_database
      shell: >
        docker exec $(docker ps -f name=^/{{ db_docker_service }}. -q | sed -n 1p)
        psql -U postgres -c "REVOKE CONNECT ON DATABASE {{ db }} FROM PUBLIC, {{ db_user }};"

    - name: Terminate_current_database_connections | {{ role_name | basename }}
      tags: Terminate_current_database_connections
      shell: >
        docker exec $(docker ps -f name=^/{{ db_docker_service }}. -q | sed -n 1p)
        psql -U postgres -c "
          SELECT pg_terminate_backend(pid)
          FROM pg_stat_activity
          WHERE pid <> pg_backend_pid() AND datname = '{{ db }}';"

    - name: Remove_database | {{ role_name | basename }}
      tags: Remove_database
      shell: >
        docker exec $(docker ps -f name=^/{{ db_docker_service }}. -q | sed -n 1p)
        psql -U postgres -c "DROP DATABASE IF EXISTS {{ db }};"

    - name: Remove_database_user | {{ role_name | basename }}
      tags: Remove_database_user
      shell: >
        docker exec $(docker ps -f name=^/{{ db_docker_service }}. -q | sed -n 1p)
        psql -U postgres -c "DROP USER IF EXISTS {{ db_user }};"

  - name: Remove_database_user_from_pgpool_pool_passwd_file | {{ role_name | basename }}
    tags: Remove_database_user_from_pgpool_pool_passwd_file
    when: database_in_postgres_cluster and inventory_hostname in groups['postgres-cluster-pgpool']
    shell: >
      docker exec $(docker ps -f name=^/pgstack_pgpool. -q | sed -n 1p)
      sed -i '/{{ db_user }}/d' /usr/local/etc/pool_passwd

  - name: Remove_site_entry_from_local_machine_hosts_file | {{ role_name | basename }}
    tags: Remove_site_entry_from_local_machine_hosts_file
    run_once: true
    become: true
    delegate_to: localhost
    lineinfile:
      path: /etc/hosts
      regexp: "{{ deployment_env }}.{{ project }}$"
      state: absent
