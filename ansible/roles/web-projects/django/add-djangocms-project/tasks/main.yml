---
- tags: Add_site_entry_to_local_machine_hosts_file
  run_once: true
  include_role:
    name: "{{ role_path }}/../../../helpers/add-project-entry-to-hosts-file"

- tags: Setup_project_database
  include_role:
    name: "{{ role_path }}/../../../helpers/setup-project-database"

- name: Create_project_virtual_environment | {{ role_name | basename }}
  tags: Create_project_virtual_environment
  when: inventory_hostname in groups['webserver']
  include_role:
    name: "{{ role_path }}/../../../helpers/create-venv"
  vars:
    venv_name: "{{ deployment_env }}_{{ project }}"
    venv_packages: "djangocms-installer {{ extra_python_packages }}"

- tags: apps_directory_operations
  when: inventory_hostname == groups['webserver'][0]
  block:
  - name: Install_djangocms_project | {{ role_name | basename }}
    tags: Install_djangocms_project
    shell: >
      docker exec
      $(docker ps -f name=^/web-stack_uwsgi. -q | sed -n 1p) bash -c "
        source {{ python_venvs_dir }}/{{ deployment_env }}_{{ project }}/bin/activate &&
        {{ djangocms_install_command }} &&
        pip install --cache-dir {{ python_venvs_dir }}/pipcache --upgrade pip &&
        pip uninstall -y --cache-dir {{ python_venvs_dir }}/pipcache psycopg2 &&
        pip install --cache-dir {{ python_venvs_dir }}/pipcache psycopg2-binary &&
        pip freeze --cache-dir {{ python_venvs_dir }}/pipcache > {{ project_dir }}/venv_requirements.txt &&
        python {{ project_dir }}/manage.py collectstatic --noinput -v 0"

  - name: Change_db_host_from_pgmaster_to_clients_db_host_in_settings_file | {{ role_name | basename }}
    tags: Change_db_host_from_pgmaster_to_clients_db_host_in_settings_file
    replace:
      path: "{{ project_dir }}/{{ project }}/settings.py"
      regexp: 'pgstack_pgmaster'
      replace: "{{ clients_db_host }}"

  - name: Project_settings | {{ role_name | basename }}
    tags: Project_settings
    include_role:
      name: "{{ role_path }}/../helpers/settings-management"

  - name: Create_uwsgi_vassal_file | {{ role_name | basename }}
    tags: Create_uwsgi_vassal_file
    include_role:
      name: "{{ role_path }}/../helpers/create-uwsgi-vassal-file"

  - name: Create_nginx_config_file | {{ role_name | basename }}
    tags: Create_nginx_config_file
    include_role:
      name: "{{ role_path }}/../helpers/create-nginx-config-file"

  - name: Create_secret_file_for_project_db_user_password | {{ role_name | basename }}
    tags: Create_secret_file_for_project_db_user_password
    copy:
      dest: "/apps/etc/secrets/{{ deployment_env }}_{{ project }}_db_user_password"
      content: "{{ hostvars[ db_node ]['db_user_password']['stdout'] }}"
      owner: "{{ ansible_user_uid }}"
      mode: 0600

  - name: Create_secret_file_for_project_secret_key | {{ role_name | basename }}
    tags: Create_secret_file_for_project_secret_key
    copy:
      dest: "/apps/etc/secrets/{{ deployment_env }}_{{ project }}_secret_key"
      content: "{{ hostvars[groups['webserver'][0]]['original_settings']['content'] | b64decode
            | regex_search(\"SECRET_KEY = '.+'\")
            | regex_replace(\"SECRET_KEY = \")
            | regex_replace(\"'\") }}"
      owner: "{{ ansible_user_uid }}"
      mode: 0600

- name: Synchronize_project_virtual_environment | {{ role_name | basename }}
  tags: Synchronize_project_virtual_environment
  when:
   - inventory_hostname in groups['webserver']
   - inventory_hostname != groups['webserver'][0]
  include_role:
    name: "{{ role_path }}/../../../helpers/pip-install"
  vars:
    venv_name: "{{ deployment_env }}_{{ project }}"
    venv_packages: "--requirement {{ project_dir }}/venv_requirements.txt"
